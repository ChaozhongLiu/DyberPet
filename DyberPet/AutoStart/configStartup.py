'''
By: Marcus
Created: 2023-03-15 03: 32 P.M.
Last Modified: 2023-03-25 11:48 P.M.
Function: This file helps the program to start automatically when booting
功能：开机自启
'''

import platform
import os
import json
from DyberPet.document_path import *
from PyQt5.QtCore import QSettings

self_startup_status = "off"
self_startup_application_path = ""


# 这个Package会往settings.json里面 放入新的数据，所以这里先写一个函数来把以前的settings.json「更新」一下咯————
class updateSettings():
    def settingsUpd(self, startAtLogin):
        print("[INFO] Settings.json should be found at: " + document_configpath)
        if os.path.isfile(document_configpath):
            # 如果文件存在，则直接读取其中内容，然后把新内容写进去即可
            config_params = json.load(open(document_configpath, 'r', encoding='UTF-8'))
            fixdragspeedx_read, fixdragspeedy_read = config_params['fixdragspeedx'], config_params['fixdragspeedy']
            gravity_read = config_params['gravity']
            tunable_scale_read = config_params['tunable_scale']
            volume_read = config_params['volume']
            language_code_read = config_params['language_code']
            on_top_hint_read = config_params.get('on_top_hint', True)
            default_pet_read = config_params.get('default_pet', document_pets[0])
            defaultAct_read = config_params.get('defaultAct', {})
            start_at_login_read = startAtLogin

            config_js = {'gravity': gravity_read,
                         'fixdragspeedx': fixdragspeedx_read,
                         'fixdragspeedy': fixdragspeedy_read,
                         'tunable_scale': tunable_scale_read,
                         'volume': volume_read,
                         'on_top_hint': on_top_hint_read,
                         'default_pet': default_pet_read,
                         'defaultAct': defaultAct_read,
                         'language_code': language_code_read,
                         'start_at_login': start_at_login_read
                         }

            print("[INFO] Update ready to write")

            with open(document_configpath, 'w', encoding='utf-8') as f:
                json.dump(config_js, f, ensure_ascii=False, indent=4)
            print("[INFO] Successfully updated settings.json")

        else:
            # 如果文件不存在，settings.py会自动创建，那我也就不用管这个啦~
            print("[INFO] Settings.json not found, it should be generated by settings.py")

class checkStartupStatus():
    # 这个函数会返回开机自启的状态，0表示关闭，1表示开启
    def checkSelfStartup(self):
        print("[INFO] Settings.json should be found at: " + document_configpath)
        if os.path.isfile(document_configpath):
            try:
                config_params = json.load(open(document_configpath, 'r', encoding='UTF-8'))
                start_at_login_read = config_params['start_at_login']

                if start_at_login_read == "On":
                    print("[INFO] Auto start enabled")
                    return 1

                else:
                    print("[INFO] Auto start disabled")
                    return 0

            except:
                updateSettings().settingsUpd(startAtLogin="Off")
                print("[INFO] Auto start disabled")
                return 0
        else:
            # 如果文件不存在，settings.py会自动创建，这里无需进行操作，且默认状态下开机自启功能为关闭状态
            print("[INFO] Settings.json not found, it should be generated by settings.py")
            print("[INFO] Auto start disabled")
            return 0

class toggleAutoStart():
    # Windows下检查注册表中DyberPet的路径，如果路径有变化则代表程序已经被移动或者重命名，返回0代表从未注册开机启动，返回1代表程序未被移动或者重命名，返回2则代表程序已经被移动或者重命名
    def checkAutoStartPath(self):
        auto_start_check_application_path = QSettings("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",QSettings.NativeFormat)
        auto_start_application_path_read = auto_start_check_application_path.value("DyberPet")
        if auto_start_application_path_read is None:
            print("[WARN] Failed to read the current installation path from the system registry.")
            return 0

        else:
            print(
                "[INFO] The DyberPet installation path read in the system registry is: " + auto_start_application_path_read)
            if document_application_path == auto_start_application_path_read:
                print("[INFO] The application has not been moved or renamed")
                return 1
            else:
                print("[WARN] The application has been moved or renamed")
                return 2

    # 开启开机自启
    def installAutoStart(self):
        print("[INFO] Enabling Auto Start...")
        
print(checkStartupStatus().checkSelfStartup())
print(toggleAutoStart().checkAutoStartPath())
